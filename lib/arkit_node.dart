import 'package:arkit_plugin/geometries/arkit_geometry.dart';
import 'package:arkit_plugin/light/arkit_light.dart';
import 'package:arkit_plugin/physics/arkit_physics_body.dart';
import 'package:flutter/widgets.dart';
import 'package:arkit_plugin/utils/random_string.dart' as random_string;
import 'package:arkit_plugin/utils/vector_utils.dart';
import 'package:vector_math/vector_math_64.dart';

/// ARKitNode is the model class for node-tree objects.
/// It encapsulates the position, rotations, and other transforms of a node, which define a coordinate system.
/// The coordinate systems of all the sub-nodes are relative to the one of their parent node.
class ARKitNode {
  ARKitNode({
    this.geometry,
    this.physicsBody,
    this.light,
    Vector3 position,
    Vector3 scale,
    Vector4 rotation,
    String name,
  })  : name = name ?? random_string.randomString(),
        position = ValueNotifier(position),
        scale = ValueNotifier(scale),
        rotation = ValueNotifier(rotation);

  /// Returns the geometry attached to the receiver.
  final ARKitGeometry geometry;

  /// Determines the receiver's position.
  final ValueNotifier<Vector3> position;

  /// Determines the receiver's scale.
  final ValueNotifier<Vector3> scale;

  /// Determines the receiver's rotation.
  /// The rotation is axis angle rotation.
  /// The three first components are the axis, the fourth one is the rotation (in radian).
  final ValueNotifier<Vector4> rotation;

  /// Determines the name of the receiver.
  /// Will be autogenerated if not defined.
  final String name;

  /// The description of the physics body of the receiver.
  final ARKitPhysicsBody physicsBody;

  /// Determines the light attached to the receiver.
  final ARKitLight light;

  Map<String, dynamic> toMap() => <String, dynamic>{
        'geometry': geometry?.toMap(),
        'position': convertVector3ToMap(position.value),
        'scale': convertVector3ToMap(scale.value),
        'rotation': convertVector4ToMap(rotation.value),
        'physicsBody': physicsBody?.toMap(),
        'light': light?.toMap(),
        'name': name,
      }..removeWhere((String k, dynamic v) => v == null);
}
